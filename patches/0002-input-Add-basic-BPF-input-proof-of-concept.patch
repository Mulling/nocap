From 9c90024fe2f18cea284dc2226761b991e5dfa2c2 Mon Sep 17 00:00:00 2001
From: Mulling <lmulling@proton.me>
Date: Sun, 9 Jul 2023 00:38:04 -0300
Subject: [PATCH 2/2] input: Add basic BPF input proof-of-concept

Signed-off-by: Mulling <lmulling@proton.me>
---
 drivers/input/input.c         | 73 +++++++++++++++++++++++++++++++++--
 include/linux/input.h         |  6 +++
 samples/bpf/.gitignore        |  1 +
 samples/bpf/Makefile          |  3 ++
 samples/bpf/input_event.bpf.c | 45 +++++++++++++++++++++
 samples/bpf/input_event.c     | 70 +++++++++++++++++++++++++++++++++
 6 files changed, 194 insertions(+), 4 deletions(-)
 create mode 100644 samples/bpf/input_event.bpf.c
 create mode 100644 samples/bpf/input_event.c

diff --git a/drivers/input/input.c b/drivers/input/input.c
index 641eb86f2..204483b9b 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -6,6 +6,7 @@
  */
 
 
+#include "linux/compiler_attributes.h"
 #define pr_fmt(fmt) KBUILD_BASENAME ": " fmt
 
 #include <linux/init.h>
@@ -25,10 +26,14 @@
 #include <linux/kstrtox.h>
 #include <linux/mutex.h>
 #include <linux/rcupdate.h>
+#include <linux/btf.h>
+#include <linux/btf_ids.h>
 #include "input-compat.h"
 #include "input-core-private.h"
 #include "input-poller.h"
 
+#include "asm-generic/error-injection.h"
+
 MODULE_AUTHOR("Vojtech Pavlik <vojtech@suse.cz>");
 MODULE_DESCRIPTION("Input core");
 MODULE_LICENSE("GPL");
@@ -405,6 +410,39 @@ void input_handle_event(struct input_dev *dev,
 	}
 }
 
+__bpf_kfunc
+void bpf_input_event(unsigned int type,
+        unsigned int code, unsigned int value)
+{
+ //trace_printk("input event %u %u %d ", type, code, value);
+}
+
+__bpf_kfunc
+int *bpf_test(struct bpf_input_ctx *ctx, unsigned int offset, const size_t rdwr_buf_size)
+{
+    // trace_printk("input event %u %u %d ",
+    //         *(ctx->type), *(ctx->code), *(ctx->value));
+    return ctx->code;
+}
+
+BTF_SET8_START(bpf_input_set)
+BTF_ID_FLAGS(func, bpf_input_event)
+BTF_ID_FLAGS(func, bpf_test, KF_RET_NULL)
+BTF_SET8_END(bpf_input_set)
+
+static const struct btf_kfunc_id_set bpf_input_kfunc_set = {
+	.owner = THIS_MODULE,
+	.set = &bpf_input_set,
+};
+
+__weak
+int input_event_bpf(unsigned int type,
+        unsigned int code, unsigned int value, struct bpf_input_ctx *ctx)
+{
+	return 0;
+}
+ALLOW_ERROR_INJECTION(input_event_bpf, ERRNO);
+
 /**
  * input_event() - report new input event
  * @dev: device that generated the event
@@ -427,6 +465,18 @@ void input_event(struct input_dev *dev,
 {
 	unsigned long flags;
 
+    struct bpf_input_ctx ctx ={
+        .type = &type,
+        .code = &code,
+        .value = &value
+    };
+
+	if (input_event_bpf(type, code, value, &ctx) != 0) {
+		return;
+	}
+
+    trace_printk("new values %u %u %d ", type, code, value);
+
 	if (is_event_supported(type, dev->evbit, EV_MAX)) {
 
 		spin_lock_irqsave(&dev->event_lock, flags);
@@ -1322,22 +1372,38 @@ static int __init input_proc_init(void)
 {
 	struct proc_dir_entry *entry;
 
+    int err;
+
 	proc_bus_input_dir = proc_mkdir("bus/input", NULL);
-	if (!proc_bus_input_dir)
+	if (!proc_bus_input_dir) {
+        pr_warn("fail to create bus/input");
 		return -ENOMEM;
+    }
 
 	entry = proc_create("devices", 0, proc_bus_input_dir,
 			    &input_devices_proc_ops);
-	if (!entry)
+	if (!entry) {
+        pr_warn("fail to create devices");
 		goto fail1;
+    }
 
 	entry = proc_create("handlers", 0, proc_bus_input_dir,
 			    &input_handlers_proc_ops);
-	if (!entry)
+	if (!entry) {
+		pr_warn("fail to create handlers");
 		goto fail2;
+    }
+
+	err = register_btf_kfunc_id_set(BPF_PROG_TYPE_TRACING,
+                &bpf_input_kfunc_set);
+	if (err) {
+		pr_warn("fail register input kfunc set: %d", err);
+		goto fail3;
+	}
 
 	return 0;
 
+ fail3: remove_proc_entry("handlers", proc_bus_input_dir);
  fail2:	remove_proc_entry("devices", proc_bus_input_dir);
  fail1: remove_proc_entry("bus/input", NULL);
 	return -ENOMEM;
@@ -2657,7 +2723,6 @@ EXPORT_SYMBOL(input_free_minor);
 static int __init input_init(void)
 {
 	int err;
-
 	err = class_register(&input_class);
 	if (err) {
 		pr_err("unable to register input_dev class\n");
diff --git a/include/linux/input.h b/include/linux/input.h
index 49790c1bd..c0223ad48 100644
--- a/include/linux/input.h
+++ b/include/linux/input.h
@@ -417,6 +417,12 @@ int input_flush_device(struct input_handle *handle, struct file *file);
 void input_set_timestamp(struct input_dev *dev, ktime_t timestamp);
 ktime_t *input_get_timestamp(struct input_dev *dev);
 
+struct bpf_input_ctx {
+    unsigned int *type;
+    unsigned int *code;
+    int *value;
+};
+
 void input_event(struct input_dev *dev, unsigned int type, unsigned int code, int value);
 void input_inject_event(struct input_handle *handle, unsigned int type, unsigned int code, int value);
 
diff --git a/samples/bpf/.gitignore b/samples/bpf/.gitignore
index 0e7bfdbff..a589ea966 100644
--- a/samples/bpf/.gitignore
+++ b/samples/bpf/.gitignore
@@ -1,4 +1,5 @@
 # SPDX-License-Identifier: GPL-2.0-only
+input_event
 cpustat
 fds_example
 hbm
diff --git a/samples/bpf/Makefile b/samples/bpf/Makefile
index a0b23e4d2..03a51d608 100644
--- a/samples/bpf/Makefile
+++ b/samples/bpf/Makefile
@@ -7,6 +7,7 @@ pound := \#
 
 # List of programs to build
 tprogs-y := test_lru_dist
+tprogs-y += input_event
 tprogs-y += sock_example
 tprogs-y += fds_example
 tprogs-y += sockex1
@@ -69,6 +70,7 @@ TRACE_HELPERS := ../../tools/testing/selftests/bpf/trace_helpers.o
 XDP_SAMPLE := xdp_sample_user.o
 
 fds_example-objs := fds_example.o
+input_event-objs := input_event.o
 sockex1-objs := sockex1_user.o
 sockex2-objs := sockex2_user.o
 sockex3-objs := sockex3_user.o
@@ -121,6 +123,7 @@ xdp_router_ipv4-objs := xdp_router_ipv4_user.o $(XDP_SAMPLE)
 
 # Tell kbuild to always build the programs
 always-y := $(tprogs-y)
+alaway-y += input_event.bpf.o
 always-y += sockex1_kern.o
 always-y += sockex2_kern.o
 always-y += sockex3_kern.o
diff --git a/samples/bpf/input_event.bpf.c b/samples/bpf/input_event.bpf.c
new file mode 100644
index 000000000..b353cbe03
--- /dev/null
+++ b/samples/bpf/input_event.bpf.c
@@ -0,0 +1,45 @@
+#include "vmlinux.h"
+#include <linux/version.h>
+#include <bpf/bpf_helpers.h>
+#include <bpf/bpf_tracing.h>
+#include <bpf/bpf_core_read.h>
+
+#define KEY_LEFTCTRL 29
+#define KEY_CAPSLOCK 58
+
+
+struct {
+	__uint(type, BPF_MAP_TYPE_QUEUE);
+	__type(value, unsigned int);
+	__uint(max_entries, 1024);
+} queue SEC(".maps");
+
+extern void bpf_input_event(unsigned int type, unsigned int code,
+			    unsigned int value) __ksym;
+
+// extern int *bpf_test(struct bpf_input_ctx *ctx) __ksym;
+
+extern int *bpf_test(struct bpf_input_ctx *ctx, unsigned int offset,
+		     const size_t __sz) __ksym;
+
+SEC("fmod_ret/input_event_bpf")
+int BPF_PROG(bpf_input, unsigned int type, unsigned int code,
+	     unsigned int value, struct bpf_input_ctx *bctx)
+{
+	bpf_input_event(type, code, value);
+
+	int *codep = bpf_test(bctx, 0, sizeof(int));
+
+	if (!codep)
+		return 0;
+
+    if (code == KEY_CAPSLOCK) {
+        codep[0] = KEY_LEFTCTRL;
+    }
+
+	bpf_map_push_elem(&queue, codep, BPF_EXIST);
+
+	return 0;
+};
+
+char _license[] SEC("license") = "GPL";
diff --git a/samples/bpf/input_event.c b/samples/bpf/input_event.c
new file mode 100644
index 000000000..b58334011
--- /dev/null
+++ b/samples/bpf/input_event.c
@@ -0,0 +1,70 @@
+#include <fcntl.h>
+#include <stdio.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <signal.h>
+#include <string.h>
+
+#include <bpf/bpf.h>
+#include <bpf/libbpf.h>
+#include "bpf_util.h"
+
+#include <linux/userio.h>
+#include <linux/serio.h>
+
+int main(const int argc, const char **argv)
+{
+	char filename[256];
+
+	snprintf(filename, sizeof filename, "%s.bpf.o", argv[0]);
+
+	struct bpf_object *obj = bpf_object__open_file(filename, NULL);
+	if (libbpf_get_error(obj)) {
+		fprintf(stderr, "ERROR: opening BPF object file failed\n");
+		return 0;
+	}
+
+	if (bpf_object__load(obj)) {
+		fprintf(stderr, "ERROR: loading BPF object file failed\n");
+		goto cleanup;
+	}
+
+	int mapfd = bpf_object__find_map_fd_by_name(obj, "queue");
+
+	if (mapfd < 0) {
+		fprintf(stderr, "ERROR: finding a map in obj file failed\n");
+		goto cleanup;
+	}
+
+	struct bpf_program *prog;
+	struct bpf_link *link;
+
+	bpf_object__for_each_program(prog, obj) {
+		link = bpf_program__attach(prog);
+		if (libbpf_get_error(link)) {
+			fprintf(stderr, "ERROR: bpf_program__attach failed\n");
+			link = NULL;
+			goto cleanup;
+		}
+	}
+
+	//int fd = open("/dev/userio", O_RDWR);
+	//if (fd < 0) {
+	//	fprintf(stderr, "ERROR: fail to open /dev/userio");
+	//	return EXIT_FAILURE;
+	//}
+
+	while (1) {
+		int value = 3;
+		if (bpf_map_lookup_and_delete_elem(mapfd, NULL, &value) == 0) {
+			fprintf(stdout, "input_event %d\n", value);
+		}
+	}
+
+cleanup:
+
+	bpf_link__destroy(link);
+	bpf_object__close(obj);
+
+	return 0;
+}
-- 
2.41.0

